using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Runtime;
using System.Diagnostics;
using System.Reflection;

namespace GenOcean.Code
{
    public interface ICodeGenerator
    {
        void GenerateTopInfo();
        void GenerateBasicInfoHeader();
        void GenerateBasicInfoFooter();
        void GenerateMemberBlock();
    }

    public class BaseCodeGenerator:ICodeGenerator
    {
        #region Class Basic Info
        public HashSet<string> UseNamespaces = new HashSet<string>();
        public string Namespace = string.Empty;
        public string ClassLevel = "public";
        public string ClassName = "Class1";
        public string ParentClassName = string.Empty;
        public HashSet<string> Interfaces = new HashSet<string>();
        #endregion

        public HashSet<IClassMemberInfo> MemberInfoes = new HashSet<IClassMemberInfo>();

        protected StreamWriter _Writer = null;
        protected long _StartPosition = 0;
        protected long _EndPosition = 0;

        /// <summary>
        /// 开始生成源文件
        /// </summary>
        /// <param name="sw"></param>
        public virtual void Generate(StreamWriter sw)
        {
            _Writer = sw;

            _StartPosition = _Writer.BaseStream.Position;
            GenerateTopInfo();
            GenerateBasicInfoHeader();
            GenerateMemberBlock();
            GenerateBasicInfoFooter();
            _EndPosition = _Writer.BaseStream.Position;
        }

        /// <summary>
        /// 生成源文件的头部声明
        /// </summary>
        public virtual void GenerateTopInfo()
        {
            _Writer.WriteLine("/*\n Code generated by Wings.\n Do not modify this file,it would be update all by generator.");
            _Writer.WriteLine($"UpdateTime:{DateTime.Now:yyyy_MM_dd-HH-mm-ss} \n*/");
        }

        /// <summary>
        /// 生成类的基础格式
        /// </summary>
        public virtual void GenerateBasicInfoHeader()
        {
            foreach(string s in UseNamespaces)
            {
                _Writer.WriteLine($"using {s};");
            }

            if(!string.IsNullOrEmpty(Namespace))
            {
                _Writer.WriteLine($"namespace {Namespace} {{");
            }
            _Writer.Write($"{ClassLevel} class {ClassName} ");
            if(!string.IsNullOrEmpty(ParentClassName) || Interfaces.Count > 0)
            {
                _Writer.Write($":");
                if(!string.IsNullOrEmpty(ParentClassName))
                {
                    _Writer.Write($"{ParentClassName},");
                }

                foreach (string s in Interfaces)
                {
                    _Writer.Write($"{Interfaces},");
                }
                _Writer.Flush();
                _Writer.BaseStream.Position--;
            }
            _Writer.Write("\n{\n");
        }

        /// <summary>
        /// 完成类的结构格式包裹
        /// </summary>
        public virtual void GenerateBasicInfoFooter()
        {
            if (!string.IsNullOrEmpty(Namespace))
            {
                _Writer.Write("\n}\n");
            }

            _Writer.Write("\n}\n");
        }

        /// <summary>
        /// 生成类的属性和字段
        /// </summary>
        public virtual void GenerateMemberBlock()
        {
            foreach (IClassMemberInfo member in MemberInfoes)
            {
                _Writer.WriteLine($"{member}");
            }
        }

        public override string ToString()
        {
            return base.ToString();
        }
    }
}

